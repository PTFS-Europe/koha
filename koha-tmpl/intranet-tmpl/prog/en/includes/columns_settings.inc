[% USE raw %]
[% USE Koha %]
[% USE TablesSettings %]
<!-- columns_settings.inc -->

<script>
function KohaTable(id_selector, dt_parameters, table_settings, add_filters) {
    var counter = 0;
    var hidden_ids = [];
    var included_ids = [];
    var selector = '#' + id_selector;

    if ( table_settings ) {

        let columns_settings = table_settings["columns"];

        let table_key = 'DataTables_%s_%s_%s'.format(
            table_settings.module,
            table_settings.page,
            table_settings.table);

        let default_save_state        = table_settings.default_save_state;
        let default_save_state_search = table_settings.default_save_state_search;

        dt_parameters.stateSave = true;
        dt_parameters.stateSaveCallback = function( settings, data ) {
            localStorage.setItem( table_key, JSON.stringify(data) )
        }

        function set_default(table_settings, settings){
            let columns = new Array(table_settings.columns.length).fill({visible: true});
            let hidden_ids, included_ids;
            [hidden_ids, included_ids] = _dt_visibility(table_settings, settings, $("#"+settings.nTable.id));
            hidden_ids.forEach((id, i) => { columns[id] = { visible: false } } );
            // State is not loaded if time is not passed
            return { columns, time: new Date() };
        }
        dt_parameters.stateLoadCallback = function(settings) {

            // Load state from URL
            const url = new URL(window.location.href);
            let state_from_url = url.searchParams.get( table_key + '_state');
            if ( state_from_url ) {
                settings.loaded_from_state = true;
                return JSON.parse(atob(state_from_url));
            }

            if (!default_save_state) return set_default(table_settings, settings);

            let state = localStorage.getItem(table_key);
            if (!state) return set_default(table_settings, settings);

            state = JSON.parse(state);

            if (!default_save_state_search ) {
                delete state.search;
                state.columns.forEach(c => delete c.search );
            }
            settings.loaded_from_state = true;
            return state;
        }

        $(columns_settings).each( function() {
            var named_id = $( 'thead th[data-colname="' + this.columnname + '"]', selector ).index( selector + ' th' );
            var used_id = dt_parameters.bKohaColumnsUseNames ? named_id : counter;
            if ( used_id == -1 ) return;

            if ( this['is_hidden'] == "1" ) {
                hidden_ids.push( used_id );
            }
            if ( this['cannot_be_toggled'] == "0" ) {
                included_ids.push( used_id );
            }
            counter++;
        });

        if ( table_settings.hasOwnProperty('default_save_state') && table_settings['default_save_state'] === 0 ) {
            localStorage.removeItem(table_key);
        }
    }

    var exportColumns = ":visible:not(.noExport)";
    var exportRows = ":visible:not(.noExport)";
    if( dt_parameters.hasOwnProperty("exportColumns") ){
        // A custom buttons configuration has been passed from the page
        exportColumns = dt_parameters["exportColumns"];
    }

    var export_format = {
        body: function ( data, row, column, node ) {
            var newnode = $(node);

            if ( newnode.find(".noExport").length > 0 ) {
                newnode = newnode.clone();
                newnode.find(".noExport").remove();
            }

            return newnode.text().replace( /\n/g, ' ' ).trim();
        }
    }

    var export_numeric = {
        body: function ( data, row, column, node ) {
            var newnode = $(node);

            if ( newnode.find(".noExport").length > 0 ) {
                newnode = newnode.clone();
                newnode.find(".noExport").remove();
            }
            let tp = newnode.text().replace( /\n/g, ' ' ).trim();
            tp = $('<p>' + tp + '</p>').text();
            return $.isNumeric(tp.replace(',', '.')) ? tp.replace(',', '.') : tp;
        }
    }

    var export_buttons = [
        {
            extend: 'csvHtml5',
            text: _("CSV"),
            exportOptions: {
                columns: exportColumns,
                rows: exportRows,
                format:  export_format
            },
        },
        {
            extend: 'copyHtml5',
            text: _("Copy"),
            exportOptions: {
                columns: exportColumns,
                rows: exportRows,
                format:  export_format
            },
        },
        {
            extend: 'print',
            text: _("Print"),
            exportOptions: {
                columns: exportColumns,
                rows: exportRows,
                format:  export_format
            },
        }
    ];

    [% IF Koha.Preference("CurrencyFormat") != 'FR' %]
        export_buttons.unshift (
            {
                extend: 'excelHtml5',
                text: _("Excel"),
                exportOptions: {
                    columns: exportColumns,
                    rows: exportRows,
                    format:  export_format
                },
            }
        );
    [% ELSE %]
        export_buttons.unshift (
            {
                extend: 'excelHtml5',
                text: _("Excel"),
                exportOptions: {
                    columns: exportColumns,
                    rows: exportRows,
                    format:  export_numeric
                },
            }
        );
    [% END %]

    dt_parameters[ "buttons" ] = [
        {
            fade: 100,
            className: "dt_button_clear_filter",
            titleAttr: _("Clear filter"),
            enabled: false,
            text: '<i class="fa fa-lg fa-times"></i> <span class="dt-button-text">' + _("Clear filter") + '</span>',
            action: function ( e, dt, node, config ) {
                dt.search( "" ).draw("page");
                node.addClass("disabled");
            }
        }
    ];

    if( included_ids.length > 0 ){
        dt_parameters[ "buttons" ].push(
            {
                extend: 'colvis',
                fade: 100,
                columns: included_ids,
                className: "columns_controls",
                titleAttr: _("Columns settings"),
                text: '<i class="fa fa-lg fa-gear"></i> <span class="dt-button-text">' + _("Columns") + '</span>',
                exportOptions: {
                    columns: exportColumns,
                    rows: exportRows,
                }
            }
        );
    }

    dt_parameters[ "buttons" ].push(
        {
            extend: 'collection',
            autoClose: true,
            fade: 100,
            className: "export_controls",
            titleAttr: _("Export or print"),
            text: '<i class="fa fa-lg fa-download"></i> <span class="dt-button-text">' + _("Export") + '</span>',
            buttons: export_buttons
        }
    );

    if ( table_settings ) {
        dt_parameters["buttons"].push(
            {
                autoClose: true,
                fade: 100,
                className: "copyConditions_controls",
                titleAttr: __("Copy conditions"),
                text: '<i class="fa fa-lg fa-copy"></i> <span class="dt-button-text">' + __("Copy conditions") + '</span>',
                action: function (e, dt, node, config) {
                    let table_key = 'DataTables_%s_%s_%s'.format(
                        table_settings.module,
                        table_settings.page,
                        table_settings.table);

                    let state = JSON.stringify(dt.state());
                    delete state.time;
                    let searchParams = new URLSearchParams(window.location.search);
                    searchParams.set(table_key + '_state', btoa(state));
                    let url = window.location.origin + window.location.pathname + '?' + searchParams.toString() + window.location.hash;
                    if( navigator.clipboard && navigator.clipboard.writeText){
                        navigator.clipboard.writeText( url );
                        // TODO Add tooltip "State copied to the clipboard"
                    }
                },
            }
        );
    }

    if ( table_settings && CAN_user_parameters_manage_column_config ) {
        dt_parameters[ "buttons" ].push(
            {
                className: "dt_button_configure_table",
                fade: 100,
                titleAttr: _("Configure table"),
                text: '<i class="fa fa-lg fa-wrench"></i> <span class="dt-button-text">' + _("Configure") + '</span>',
                action: function() {
                    window.location = '/cgi-bin/koha/admin/columns_settings.pl?module=' + table_settings['module'] + '&page=' + table_settings['page'] + '&table=' + table_settings['table'];
                },
            }
        );
    }

    var table = $(selector);
    if ( add_filters ) {
        // Duplicate the table header row for columnFilter
        thead_row = table.find('thead tr');
        clone = thead_row.clone().addClass('filters_row');
        clone.find("th.NoSort").html('');
        thead_row.before(clone);
    }

    var new_parameters = {}
    $.extend(true, new_parameters, dataTablesDefaults, dt_parameters);
    var default_column_defs = [
        { "targets": [ "title-string" ], "type": "title-string" },
        { "targets": [ "string-sort" ],  "type": "string" },
        { "targets": [ "anti-the" ],     "type": "anti-the" },
        { "targets": [ "NoSort" ],       "orderable": false, "searchable": false },
        { "targets": [ "NoVisible" ],    "visible": false }
    ];
    if ( new_parameters["aoColumnDefs"] === undefined ) {
        new_parameters["aoColumnDefs"] = default_column_defs;
    } else {
        $(default_column_defs).each(function(){
            new_parameters["aoColumnDefs"].push(this);
        });
    }

    new_parameters["loaded_from_state"] = false;

    if ( table_settings ) {
        if ( table_settings.hasOwnProperty('default_display_length') && table_settings['default_display_length'] != null ) {
            // pageLength needs to be a number, not a string, or it can cause issues with DataTable's next button.
            new_parameters["pageLength"] = parseInt(table_settings['default_display_length']);
        }
        if ( table_settings.hasOwnProperty('default_sort_order') && table_settings['default_sort_order'] != null ) {
            new_parameters["order"] = [[ table_settings['default_sort_order'], 'asc' ]];
        }
    }

    table.dataTable(new_parameters);
    table.DataTable().on("column-visibility.dt", function(){
        if( typeof columnsInit == 'function' ){
            // This function can be created separately and used to trigger
            // an event after the DataTable has loaded AND column visibility
            // has been updated according to the table's configuration
            columnsInit(this);
        }
    }).columns( hidden_ids ).visible( false );

    if ( add_filters ) {
        // show a link to activate filtering
        link = $('<a>')
            .attr('href', '#')
            .attr('id', id_selector + '_activate_filters');
        $("." + id_selector  + "_table_controls").prepend(link);
        deactivate_filters(id_selector);
    }

    $(".dt_button_clear_filter, .columns_controls, .export_controls, .dt_button_configure_table").tooltip();

    return table;
}
</script>
<!-- / columns_settings.inc -->

#!/usr/bin/perl

# Copyright 2014 ByWater Solutions
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.

use Modern::Perl;

use CGI;
use JSON qw(to_json);
use Try::Tiny;

use C4::Circulation qw( AddRenewal CanBookBeRenewed );
use C4::Context;
use C4::Auth qw(check_cookie_auth);

use Koha::DateUtils qw(output_pref dt_from_string);

my $input = CGI->new;

my ( $auth_status ) =
  check_cookie_auth( $input->cookie('CGISESSID'),
    { circulate => 'circulate_remaining_permissions' } );

if ( $auth_status ne "ok" ) {
    exit 0;
}

binmode STDOUT, ":encoding(UTF-8)";
print $input->header( -type => 'text/plain', -charset => 'UTF-8' );

my $itemnumber     = $input->param('itemnumber');
my $borrowernumber = $input->param('borrowernumber');
my $override_limit = $input->param('override_limit');
my $branchcode     = $input->param('branchcode')
  || C4::Context->userenv->{'branch'};
my $seen           = $input->param('seen');
my $date_due;
if ( $input->param('date_due') ) {
    $date_due = dt_from_string( scalar $input->param('date_due') );
}

my $data;
$data->{itemnumber} = $itemnumber;
$data->{borrowernumber} = $borrowernumber;
$data->{branchcode} = $branchcode;

my $patron = Koha::Patrons->find($borrowernumber);
my $item = Koha::Items->find($itemnumber);

( $data->{renew_okay}, $data->{error} ) =
    CanBookBeRenewed( $patron, $item->checkout, $override_limit );

# If we're allowing reserved items to be renewed...
if ( $data->{error} && $data->{error} eq 'on_reserve' && C4::Context->preference('AllowRenewalOnHoldOverride')) {
    $data->{renew_okay} = 1;
    $data->{error} = undef;
}

if ( $data->{renew_okay} || ( $seen && $data->{error} eq 'too_unseen') ) {
    try{
        $date_due = AddRenewal( $borrowernumber, $itemnumber, $branchcode, $date_due, undef, undef, $seen );
        $data->{date_due} = output_pref( { dt => $date_due, as_due_date => 1 } );
        $data->{renew_okay} = 1;
        $data->{error} = undef;
    } catch {
        if ( ref($_) eq 'Koha::Exceptions::Checkout::FailedRenewal' ) {
            $data->{error} = 'renewal_failed';
        } else {
            $_->rethrow;
        }
    };
}

print to_json($data);

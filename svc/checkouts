#!/usr/bin/perl

# Copyright 2014 ByWater Solutions
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.

use Modern::Perl;

use CGI;
use JSON qw(to_json);

use C4::Auth qw(check_cookie_auth haspermission);
use C4::Circulation qw(GetIssuingCharges CanBookBeRenewed GetRenewCount );
use C4::Overdues qw(GetFine);
use C4::Context;

use Koha::AuthorisedValues;
use Koha::DateUtils qw( dt_from_string output_pref );
use Koha::Items;
use Koha::ItemTypes;

my $input = CGI->new;

my ( $auth_status, $session ) = check_cookie_auth( $input->cookie('CGISESSID'));
if( $auth_status ne 'ok' ) {
    print CGI::header( '-status' => '401' );
    exit 0;
}

my $userid   = $session->param('id');

unless (haspermission($userid, { circulate => 'circulate_remaining_permissions' })
    || haspermission($userid, { borrowers => 'edit_borrowers' })) {
    exit 0;
}

my @sort_columns = qw/date_due title itype issuedate branchcode itemcallnumber/;

my @borrowernumber   = $input->multi_param('borrowernumber');
my $offset           = $input->param('iDisplayStart');
my $results_per_page = $input->param('iDisplayLength') || -1;

my $sorting_column = $input->param('iSortCol_0') || q{};
$sorting_column = ( $sorting_column && $sort_columns[$sorting_column] ) ? $sort_columns[$sorting_column] : 'issuedate';

my $sorting_direction = $input->param('sSortDir_0') || q{};
$sorting_direction = $sorting_direction eq 'asc' ? 'asc' : 'desc';

$results_per_page = undef if ( $results_per_page == -1 );

binmode STDOUT, ":encoding(UTF-8)";
print $input->header( -type => 'text/plain', -charset => 'UTF-8' );

my @parameters;
my $sql = '
    SELECT
        issues.issue_id,
        issues.issuedate,
        issues.date_due,
        issues.date_due < now() as date_due_overdue,
        issues.timestamp,

        issues.onsite_checkout,

        biblio.biblionumber,
        biblio.title,
        biblio.subtitle,
        biblio.medium,
        biblio.part_number,
        biblio.part_name,
        biblio.author,

        items.itemnumber,
        items.barcode,
        branches2.branchname AS homebranch,
        items.itemnotes,
        items.itemnotes_nonpublic,
        items.itemcallnumber,
        items.copynumber,
        items.replacementprice,

        issues.branchcode,
        branches.branchname,

        items.itype,
        biblioitems.itemtype,

        items.ccode AS collection,

        borrowers.borrowernumber,
        borrowers.surname,
        borrowers.firstname,
        borrowers.cardnumber,

        items.itemlost,
        items.damaged,
        items.location,
        items.enumchron,
        items.materials,

        DATEDIFF( issues.issuedate, CURRENT_DATE() ) AS not_issued_today,

        return_claims.id AS return_claim_id,
        return_claims.notes AS return_claim_notes,
        return_claims.created_on AS return_claim_created_on,
        return_claims.updated_on AS return_claim_updated_on

    FROM issues
        LEFT JOIN items USING ( itemnumber )
        LEFT JOIN biblio USING ( biblionumber )
        LEFT JOIN biblioitems USING ( biblionumber )
        LEFT JOIN borrowers USING ( borrowernumber )
        LEFT JOIN branches ON ( issues.branchcode = branches.branchcode )
        LEFT JOIN branches branches2 ON ( items.homebranch = branches2.branchcode )
        LEFT JOIN return_claims USING ( issue_id )
    WHERE issues.borrowernumber
';

if ( @borrowernumber == 1 ) {
    $sql .= '= ?';
}
else {
    $sql .= ' IN (' . join( ',', ('?') x @borrowernumber ) . ') ';
}
push( @parameters, @borrowernumber );

$sql .= " ORDER BY $sorting_column $sorting_direction ";

my $dbh = C4::Context->dbh();
my $sth = $dbh->prepare($sql);
$sth->execute(@parameters);

my $item_level_itypes = C4::Context->preference('item-level_itypes');
my $claims_returned_lost_value = C4::Context->preference('ClaimReturnedLostValue');
my $confirm_parts_required = C4::Context->preference("CircConfirmItemParts");

my $itemtypes = { map { $_->{itemtype} => $_->{translated_description} } @{ Koha::ItemTypes->search_with_localization->unblessed } };

my @checkouts_today;
my @checkouts_previous;
while ( my $c = $sth->fetchrow_hashref() ) {
    my ($charge) = GetIssuingCharges( $c->{itemnumber}, $c->{borrowernumber} );
    my $fine = GetFine( $c->{itemnumber}, $c->{borrowernumber} );

    my $checkout_obj = Koha::Checkouts->find( $c->{issue_id} );
    my ( $can_renew, $can_renew_error, $info ) =
      CanBookBeRenewed( $checkout_obj->patron, $checkout_obj );
    my $can_renew_date =
      $can_renew_error && $can_renew_error eq 'too_soon'
      ? output_pref(
        {
            dt => $info->{soonest_renew_date},
            as_due_date => 1
        }
      )
      : undef;

    my (
        $renewals_count,
        $renewals_allowed,
        $renewals_remaining,
        $unseen_count,
        $unseen_allowed,
        $unseen_remaining
    ) =
      GetRenewCount( $c->{borrowernumber}, $c->{itemnumber} );

    my ( $itemtype, $recordtype, $type_for_stat );
    $itemtype      = $itemtypes->{ $c->{itype} }    if $c->{itype};
    $recordtype    = $itemtypes->{ $c->{itemtype} } if $c->{itemtype};
    $type_for_stat = $item_level_itypes ? $itemtype : $recordtype;

    my $location;
    if ( $c->{location} ) {
        my $av = Koha::AuthorisedValues->get_description_by_koha_field(
            { kohafield => 'items.location', authorised_value => $c->{location} } );
        $location = $av->{lib} ? $av->{lib} : '';
    }
    my $collection;
    if ( $c->{collection} ) {
        my $av = Koha::AuthorisedValues->get_description_by_koha_field(
            { kohafield => 'items.ccode', authorised_value => $c->{collection} } );
        $collection = $av->{lib} ? $av->{lib} : '';
    }
    my $lost;
    my $claims_returned;
    if ( $c->{itemlost} ) {
        my $av = Koha::AuthorisedValues->get_description_by_koha_field(
            { kohafield => 'items.itemlost', authorised_value => $c->{itemlost} } );
        $lost            = $av->{lib} ? $av->{lib} : '';
        $claims_returned = $c->{itemlost} eq $claims_returned_lost_value;
    }
    my $damaged;
    if ( $c->{damaged} ) {
        my $av = Koha::AuthorisedValues->get_description_by_koha_field(
            { kohafield => 'items.damaged', authorised_value => $c->{damaged} } );
        $damaged = $av->{lib} ? $av->{lib} : '';
    }
    my $materials;
    if ( $c->{materials} && $confirm_parts_required ) {
        my $descriptions = Koha::AuthorisedValues->get_description_by_koha_field({frameworkcode => '', kohafield =>'items.materials', authorised_value => $c->{materials} });
        $materials = $descriptions->{lib} // $c->{materials};
    }
    my @subtitles = split(/ \| /, $c->{'subtitle'} // '' );

    my $recalled = 0;
    if ( C4::Context->preference('UseRecalls') ) {
        my $item = Koha::Items->find( $c->{itemnumber} );
        my $recall = undef;
        $recall = $item->check_recalls if $item->can_be_waiting_recall;
        if ( defined $recall ) {
            if ( $recall->item_level ) {
                if ( $recall->item_id == $c->{itemnumber} ) {
                    # item-level recall on this item
                    $recalled = 1;
                } else {
                    $recalled = 0;
                }
            } else {
                # biblio-level recall, but don't want to mark recalled if the recall has been allocated a different item
                if ( !$recall->waiting ) {
                    $recalled = 1;
                }
            }
        }
    }

    my $checkout = {
        DT_RowId             => $c->{itemnumber} . '-' . $c->{borrowernumber},
        title                => $c->{title},
        subtitle             => \@subtitles,
        medium               => $c->{medium} // '',
        part_number          => $c->{part_number} // '',
        part_name            => $c->{part_name} // '',
        author               => $c->{author},
        barcode              => $c->{barcode},
        type_for_stat          => $type_for_stat || q{},
        itemtype_description   => $itemtype || q{},
        recordtype_description => $recordtype || q{},
        collection           => $collection,
        location             => $location,
        homebranch           => $c->{homebranch},
        itemnotes            => $c->{itemnotes},
        itemnotes_nonpublic  => $c->{itemnotes_nonpublic},
        branchcode           => $c->{branchcode},
        branchname           => $c->{branchname},
        itemcallnumber       => $c->{itemcallnumber} || q{},
        copynumber           => $c->{copynumber} || q{},
        charge         => $charge,
        fine           => $fine,
        price          => $c->{replacementprice} || q{},
        can_renew      => $can_renew,
        can_renew_error     => $can_renew_error,
        can_renew_date      => $can_renew_date,
        itemnumber          => $c->{itemnumber},
        borrowernumber      => $c->{borrowernumber},
        biblionumber        => $c->{biblionumber},
        issuedate           => $c->{issuedate},
        date_due            => $c->{date_due},
        date_due_overdue    => $c->{date_due_overdue} ? JSON::true : JSON::false,
        timestamp           => $c->{timestamp},
        onsite_checkout     => $c->{onsite_checkout},
        enumchron           => $c->{enumchron},
        renewals_count      => $renewals_count,
        renewals_allowed    => $renewals_allowed || 0,
        renewals_remaining  => $renewals_remaining,
        unseen_count        => $unseen_count,
        unseen_allowed      => $unseen_allowed,
        unseen_remaining    => $unseen_remaining,

        return_claim_id         => $c->{return_claim_id},
        return_claim_notes      => $c->{return_claim_notes},
        return_claim_created_on => $c->{return_claim_created_on},
        return_claim_updated_on => $c->{return_claim_updated_on},
        return_claim_created_on_formatted => $c->{return_claim_created_on} ? output_pref({ dt => dt_from_string( $c->{return_claim_created_on} ) }) : undef,
        return_claim_updated_on_formatted => $c->{return_claim_updated_on} ? output_pref({ dt => dt_from_string( $c->{return_claim_updated_on} ) }) : undef,

        issuedate_formatted => output_pref(
            {
                dt          => dt_from_string( $c->{issuedate} ),
                as_due_date => 1
            }
        ),
        date_due_formatted => output_pref(
            {
                dt          => dt_from_string( $c->{date_due} ),
                as_due_date => 1
            }
        ),
        lost    => $lost,
        claims_returned => $claims_returned,
        damaged => $damaged,
        materials => $materials,
        borrower => {
            surname    => $c->{surname},
            firstname  => $c->{firstname},
            cardnumber => $c->{cardnumber},
        },
        issued_today => !$c->{not_issued_today},
        recalled => $recalled,
    };

    if ( $c->{not_issued_today} ) {
        push( @checkouts_previous, $checkout );
    }
    else {
        push( @checkouts_today, $checkout );
    }
}


@checkouts_today = sort { $a->{timestamp} cmp $b->{timestamp} } @checkouts_today;    # latest to earliest
@checkouts_today = reverse(@checkouts_today)
  if ( C4::Context->preference('todaysIssuesDefaultSortOrder') eq 'desc' );      # earliest to latest

@checkouts_previous =
  sort { $a->{date_due} cmp $b->{date_due} || $a->{timestamp} cmp $b->{timestamp} }
  @checkouts_previous;                                                               # latest to earliest
@checkouts_previous = reverse(@checkouts_previous)
  if ( C4::Context->preference('previousIssuesDefaultSortOrder') eq 'desc' );    # earliest to latest

my @checkouts = ( @checkouts_today, @checkouts_previous );

my $i = 1;
map { $_->{sort_order} = $i++ } @checkouts;


my $data;
$data->{'iTotalRecords'}        = scalar @checkouts;
$data->{'iTotalDisplayRecords'} = scalar @checkouts;
$data->{'sEcho'}                = $input->param('sEcho') || undef;
$data->{'aaData'}               = \@checkouts;

print to_json($data);
